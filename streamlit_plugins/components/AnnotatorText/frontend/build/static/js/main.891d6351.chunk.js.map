{"version":3,"sources":["index.tsx"],"names":["ls","Streamlit","events","addEventListener","RENDER_EVENT","event","console","debug","detail","args","config","interfaces","task","LabelStudio","onLabelStudioLoad","_ls","onSubmitAnnotation","annotation","JSON","parse","stringify","setComponentValue","onUpdateAnnotation","setFrameHeight","onDeleteAnnotation","setComponentReady"],"mappings":"4HAAA,WAIIA,EAJJ,6BA4DAC,IAAUC,OAAOC,iBAAiBF,IAAUG,cAjD5C,SAAkBC,GAChB,GAAIL,EACFM,QAAQC,MAAM,eADhB,CAKA,IACA,EADcF,EAAkCG,OACNC,KAAlCC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,WAAYC,EAA5B,EAA4BA,KAE5BZ,EAAK,IAAIa,IAAY,OAAQ,CAC3BH,SACAC,aACAC,OAEAE,kBAAmB,SAAUC,GAC3BT,QAAQC,MAAM,WAGhBS,mBAAoB,SAAUD,EAAUE,GACtCX,QAAQC,MAAM,aACdU,EAAaC,KAAKC,MAAMD,KAAKE,UAAUH,IACvChB,IAAUoB,kBAAkBJ,IAG9BK,mBAAoB,SAACP,EAAUE,GAC7BX,QAAQC,MAAM,WACdU,EAAaC,KAAKC,MAAMD,KAAKE,UAAUH,IACvChB,IAAUoB,kBAAkBJ,GAK5BhB,IAAUsB,kBAGZC,mBAAoB,SAAUT,EAAUE,GACtCX,QAAQC,MAAM,WACdU,EAAaC,KAAKC,MAAMD,KAAKE,UAAUH,IACvChB,IAAUoB,kBAAkBJ,GAC5BhB,IAAUsB,oBAMdtB,IAAUsB,qBAOZtB,IAAUwB,sB","file":"static/js/main.891d6351.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport LabelStudio from \"label-studio\"\nimport \"label-studio/build/static/css/main.css\"\n\nlet ls: any\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  if (ls) {\n    console.debug(\"skipped\")\n    return\n  }\n\n  const data = (event as CustomEvent<RenderData>).detail\n  const { config, interfaces, task } = data.args\n\n  ls = new LabelStudio(\"root\", {\n    config,\n    interfaces,\n    task,\n\n    onLabelStudioLoad: function (_ls: any) {\n      console.debug(\"loaded\")\n    },\n\n    onSubmitAnnotation: function (_ls: any, annotation: Record<string, any>) {\n      console.debug(\"submitted\")\n      annotation = JSON.parse(JSON.stringify(annotation))\n      Streamlit.setComponentValue(annotation)\n    },\n\n    onUpdateAnnotation: (_ls: any, annotation: Record<string, any>) => {\n      console.debug(\"updated\")\n      annotation = JSON.parse(JSON.stringify(annotation))\n      Streamlit.setComponentValue(annotation)\n      // We tell Streamlit to update our frameHeight after each update event, in case\n      // it has changed. (This isn't strictly necessary if the results sidebar is not\n      // rendered because the component height stays fixed. But this is a low-cost\n      // function, so there's no harm in doing it redundantly.)\n      Streamlit.setFrameHeight()\n    },\n\n    onDeleteAnnotation: function (_ls: any, annotation: Record<string, any>) {\n      console.debug(\"deleted\")\n      annotation = JSON.parse(JSON.stringify(annotation))\n      Streamlit.setComponentValue(annotation)\n      Streamlit.setFrameHeight()\n    },\n  })\n\n  // Finally, tell Streamlit to update our initial height. We omit the\n  // `height` parameter here to have it default to our scrollHeight.\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n"],"sourceRoot":""}