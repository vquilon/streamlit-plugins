{"version":3,"sources":["index.tsx"],"names":["labelStudio","document","body","appendChild","createElement","setAttribute","Streamlit","events","addEventListener","RENDER_EVENT","event","console","debug","setFrameHeight","_data$args","detail","args","config","interfaces","user","task","LabelStudio","on","LS","c","annotationStore","addAnnotation","userGenerate","selectAnnotation","id","annotation","JSON","parse","stringify","setComponentValue","setComponentReady"],"mappings":"+HAAA,WAQIA,EARJ,8BAIaC,SAASC,KAAKC,YAAYF,SAASG,cAAc,SAC1CD,YAAYF,SAASG,cAAc,QAChDC,aAAa,KAAM,gBAiE1BC,IAAUC,OAAOC,iBAAiBF,IAAUG,cAxD5C,SAAkBC,GAChB,GAAIV,EAGF,OAFAW,QAAQC,MAAM,yBACdN,IAAUO,iBAIZ,IACAC,EADcJ,EAAkCK,OACAC,KAAxCC,EAAMH,EAANG,OAAQC,EAAUJ,EAAVI,WAAYC,EAAIL,EAAJK,KAAMC,EAAIN,EAAJM,MAMlCpB,EAAc,IAAIqB,IAAY,eAAgB,CAACJ,SAAQC,aAAYC,OAAMC,UAC7DE,GAAG,mBAAmB,SAACC,GACjCZ,QAAQC,MAAM,UACd,IAAIY,EAAID,EAAGE,gBAAgBC,cAAc,CACvCC,cAAc,IAEhBJ,EAAGE,gBAAgBG,iBAAiBJ,EAAEK,IACtCvB,IAAUO,gBACZ,IAEAb,EAAYsB,GAAG,oBAAoB,SAACC,EAASO,GAC3CnB,QAAQC,MAAM,aACdkB,EAAaC,KAAKC,MAAMD,KAAKE,UAAUH,IACvCxB,IAAU4B,kBAAkBJ,GAC5BxB,IAAUO,gBACZ,IAEAb,EAAYsB,GAAG,oBAAoB,SAACC,EAASO,GAC3CnB,QAAQC,MAAM,WACdkB,EAAaC,KAAKC,MAAMD,KAAKE,UAAUH,IACvCxB,IAAU4B,kBAAkBJ,GAK5BxB,IAAUO,gBACZ,IAEAb,EAAYsB,GAAG,oBAAoB,SAACC,EAASO,GAC3CnB,QAAQC,MAAM,WACdkB,EAAaC,KAAKC,MAAMD,KAAKE,UAAUH,IACvCxB,IAAU4B,kBAAkBJ,GAC5BxB,IAAUO,gBACZ,IAKAP,IAAUO,gBACZ,IAMAP,IAAU6B,oBACV7B,IAAUO,gB","file":"static/js/main.34b82d10.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport LabelStudio from \"@heartexlabs/label-studio\"\nimport '@heartexlabs/label-studio/build/static/css/main.css';\n\nconst span = document.body.appendChild(document.createElement(\"span\"))\nconst ls_div = span.appendChild(document.createElement(\"div\"))\nls_div.setAttribute(\"id\", \"label-studio\");\n\nlet labelStudio: any\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  if (labelStudio) {\n    console.debug(\"Already rendered\")\n    Streamlit.setFrameHeight();\n    return\n  }\n\n  const data = (event as CustomEvent<RenderData>).detail\n  const { config, interfaces, user, task } = data.args\n  // config: data.args[\"config\"],\n  // interfaces: data.args[\"interfaces\"][0],\n  // user: data.args[\"user\"][0],\n  // task: data.args[\"task\"],\n\n  labelStudio = new LabelStudio(\"label-studio\", {config, interfaces, user, task});\n  labelStudio.on(\"labelStudioLoad\", (LS: any) => {\n    console.debug(\"loaded\");\n    var c = LS.annotationStore.addAnnotation({\n      userGenerate: true\n    });\n    LS.annotationStore.selectAnnotation(c.id);\n    Streamlit.setFrameHeight();\n  });\n\n  labelStudio.on(\"submitAnnotation\", (LS: any, annotation: Record<string, any>) => {\n    console.debug(\"submitted\");\n    annotation = JSON.parse(JSON.stringify(annotation));\n    Streamlit.setComponentValue(annotation);\n    Streamlit.setFrameHeight();\n  });\n\n  labelStudio.on(\"updateAnnotation\", (LS: any, annotation: Record<string, any>) => {\n    console.debug(\"updated\")\n    annotation = JSON.parse(JSON.stringify(annotation));\n    Streamlit.setComponentValue(annotation);\n   // We tell Streamlit to update our frameHeight after each update event, in case\n   // it has changed. (This isn't strictly necessary if the results sidebar is not\n   // rendered because the component height stays fixed. But this is a low-cost\n   // function, so there's no harm in doing it redundantly.)\n    Streamlit.setFrameHeight();\n  });\n\n  labelStudio.on(\"deleteAnnotation\", (LS: any, annotation: Record<string, any>) => {\n    console.debug(\"deleted\");\n    annotation = JSON.parse(JSON.stringify(annotation));\n    Streamlit.setComponentValue(annotation);\n    Streamlit.setFrameHeight();\n  });\n\n  // labelStudio.on('event', callback);\n  // Finally, tell Streamlit to update our initial height. We omit the\n  // `height` parameter here to have it default to our scrollHeight.\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\nStreamlit.setFrameHeight();\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n// function onRender(event: Event): void {\n//   const data = (event as CustomEvent<RenderData>).detail;\n//\n//   var labelStudio = new LabelStudio('label-studio', {\n//     config: data.args[\"config\"],\n//     interfaces: data.args[\"interfaces\"][0],\n//     user: data.args[\"user\"][0],\n//     task: data.args[\"task\"],\n//\n//     onLabelStudioLoad: function(LS) {\n//       const c = LS.completionStore.addCompletion({\n//         userGenerate: true\n//       });\n//       LS.completionStore.selectCompletion(c.id);\n//     },\n//\n//     onSubmitCompletion: function(LS, completion) {\n//       // console.log(LS)\n//       completion = JSON.parse(JSON.stringify(completion));\n//       Streamlit.setComponentValue(completion);\n//     },\n//\n//\n//   });\n//\n//   // We tell Streamlit to update our frameHeight after each render event, in\n//   // case it has changed. (This isn't strictly necessary for the example\n//   // because our height stays fixed, but this is a low-cost function, so\n//   // there's no harm in doing it redundantly.)\n//   Streamlit.setFrameHeight();\n// }\n//\n//\n// // Attach our `onRender` handler to Streamlit's render event.\n// Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\n// // Tell Streamlit we're ready to start receiving data. We won't get our\n// // first RENDER_EVENT until we call this function.\n// Streamlit.setComponentReady();\n//\n// // Finally, tell Streamlit to update our initial height. We omit the\n// // `height` parameter here to have it default to our scrollHeight.\n// Streamlit.setFrameHeight();\n"],"sourceRoot":""}